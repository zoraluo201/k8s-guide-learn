# nonk8s
# 规范：https://istio.io/latest/zh/docs/reference/config/networking/virtual-service/
# - 下面的示例远远没有列出所有选项，请参考上面的规范以获取更多信息。
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: go-multiroute
  namespace: default
spec:
  hosts: # 指定要应用此虚拟服务的目标主机列表，可以是（携带通配符）域名/ip/集群服务名
    - go-multiroute # 若service与规则不在同一命名空间，最好使用完整服务名：go-multiroute.default.svc.cluster.local

  # 下面的路由规则将按顺序匹配执行，每个HTTP请求最多匹配成功一个规则（一般最后的规则是无条件的默认规则）
  http:
    # 第一组路由规则：将HTTP header中包含键值对 test-version: v2 的流量路由到子集 v2
    - match:
        - headers:
            test-version:
              exact: "v2" # 除了exact，还支持prefix、regex
      timeout: 1200ms
      route:
        - destination:
            host: go-multiroute
            subset: v2
    # 第二组路由规则：将所有流量路由到按权重分流到不同目标（即 DestinationRule 定义好的子集）
    # 此规则不含匹配条件，但配置了超时、重试和熔断机制
    - timeout: 2s
      #      retries:
      #        attempts: 3
      #        perTryTimeout: 2s
      route:
        - destination:
            # 目的服务名，建议使用 go-multiroute.default.svc.cluster.local 的FQDN完整形式
            # - 避免当策略与服务名不在同一命名空间时出现错误
            host: go-multiroute
            subset: v1
          weight: 80
        - destination:
            host: go-multiroute
            subset: v2
          weight: 20
#  tcp:



# 扩展
# - 下面的规则将来自 sourceLabels 且路由是 /v1/get_user 的流量重定向为 /v2/get_user，然后发送到 flaskapp 的 v1 子集
#  http:
#    - match:
#      - sourceLabels:
#          app: sleep
#          version: v1
#        uri:
#          exact: "/v1/get_user"
#      redirect:
#        uri: /v2/get_user
#      route:
#        - destination:
#            host: flaskapp
#            subset: v1